#include <iostream>
#include <vector>
#include <algorithm>

std::string performColumnarTransposition(const std::string& message, const std::string& key) {
    std::string encryptedMessage;

    // Determine the number of columns
    int columns = key.length();

    // Determine the number of rows
    int rows = message.length() / columns;
    if (message.length() % columns != 0) {
        rows++;
    }

    // Create a matrix to hold the message
    std::vector<std::vector<char>> matrix(rows, std::vector<char>(columns));

    // Fill the matrix with the message
    int index = 0;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {
            if (index < message.length()) {
                matrix[i][j] = message[index];
                index++;
            } else {
                matrix[i][j] = ' ';
            }
        }
    }

    // Sort the key in ascending order and store the corresponding column indices
    std::vector<int> indices(columns);
    for (int i = 0; i < columns; i++) {
        indices[i] = i;
    }
    std::sort(indices.begin(), indices.end(), [&key](int a, int b) {
        return key[a] < key[b];
    });

    // Build the encrypted message by reading the matrix column by column using sorted indices
    for (int i = 0; i < columns; i++) {
        for (int j = 0; j < rows; j++) {
            encryptedMessage += matrix[j][indices[i]];
        }
    }

    return encryptedMessage;
}

int main() {
    std::string message;
    std::string key;

    std::cout << "Enter the message: ";
    std::getline(std::cin, message);

    std::cout << "Enter the key: ";
    std::getline(std::cin, key);

    std::string encryptedMessage = performColumnarTransposition(message, key);

    std::cout << "Encrypted message: " << encryptedMessage << std::endl;

    return 0;
}
